<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.shinkaji.solveza.api.usermanagement.infrastructure.mapper.UserMapper">

    <!-- Result Map -->
    <resultMap id="UserResult" type="com.shinkaji.solveza.api.usermanagement.infrastructure.mapper.dto.UserDto">
        <constructor>
            <idArg column="id" javaType="String"/>
            <arg column="provider" javaType="String"/>
            <arg column="external_id" javaType="String"/>
            <arg column="name" javaType="String"/>
            <arg column="email" javaType="String"/>
            <arg column="created_at" javaType="java.time.LocalDateTime"/>
            <arg column="updated_at" javaType="java.time.LocalDateTime"/>
        </constructor>
    </resultMap>

    <resultMap id="UserRoleResult" type="com.shinkaji.solveza.api.usermanagement.infrastructure.mapper.dto.UserRoleDto">
        <constructor>
            <arg column="user_id" javaType="String"/>
            <arg column="role_id" javaType="String"/>
            <arg column="assigned_at" javaType="java.time.LocalDateTime"/>
        </constructor>
    </resultMap>

    <!-- Select Queries -->
    <select id="findById" resultMap="UserResult">
        SELECT id, provider, external_id, name, email, created_at, updated_at
        FROM users
        WHERE id = #{id}::uuid
    </select>

    <select id="findByProviderAndExternalId" resultMap="UserResult">
        SELECT id, provider, external_id, name, email, created_at, updated_at
        FROM users
        WHERE provider = #{provider} AND external_id = #{externalId}
    </select>

    <select id="findByCriteria" resultMap="UserResult">
        SELECT id, provider, external_id, name, email, created_at, updated_at
        FROM users
        <where>
            <if test="criteria.provider != null">
                AND provider = #{criteria.provider}
            </if>
            <if test="criteria.externalId != null">
                AND external_id = #{criteria.externalId}
            </if>
        </where>
        ORDER BY created_at DESC
    </select>

    <select id="existsById" resultType="boolean">
        SELECT EXISTS(SELECT 1 FROM users WHERE id = #{id}::uuid)
    </select>

    <select id="existsByProviderAndExternalId" resultType="boolean">
        SELECT EXISTS(SELECT 1 FROM users WHERE provider = #{provider} AND external_id = #{externalId})
    </select>

    <select id="findUserRolesByUserId" resultMap="UserRoleResult">
        SELECT user_id, role_id, assigned_at
        FROM user_roles
        WHERE user_id = #{userId}::uuid
    </select>

    <!-- Insert Queries -->
    <insert id="insert">
        INSERT INTO users (id, provider, external_id, name, email, created_at, updated_at)
        VALUES (#{user.id}::uuid, #{user.provider}, #{user.externalId}, #{user.name}, #{user.email}, #{user.createdAt}, #{user.updatedAt})
    </insert>

    <insert id="insertUserRole">
        INSERT INTO user_roles (user_id, role_id, assigned_at)
        VALUES (#{userRole.userId}::uuid, #{userRole.roleId}::uuid, #{userRole.assignedAt})
    </insert>

    <!-- Update Queries -->
    <update id="update">
        UPDATE users
        SET name = #{user.name},
            email = #{user.email},
            updated_at = #{user.updatedAt}
        WHERE id = #{user.id}::uuid
    </update>

    <!-- Delete Queries -->
    <delete id="delete">
        DELETE FROM users WHERE id = #{id}::uuid
    </delete>

    <delete id="deleteUserRole">
        DELETE FROM user_roles WHERE user_id = #{userId}::uuid AND role_id = #{roleId}::uuid
    </delete>

</mapper>
